name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  # 테스트용 환경변수, secrets.XXX 사용 가능
  DJANGO_SETTINGS_MODULE: config.settings
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # 1. Backend (Django) Lint & Test
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django migrations (SQLite, 임시 DB)
        run: python manage.py migrate

      - name: Run Django unit tests
        run: python manage.py test

      # (옵션) Black, isort, flake8 등 코드 스타일 검사 추가
      # - name: Run Black
      #   run: black . --check

  # 2. Frontend (React) Lint & Build
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Lint (ESLint)
        run: |
          if [ -f node_modules/.bin/eslint ]; then
            npm run lint || true
          fi

      - name: Build (React)
        run: npm run build

      # (옵션) React 테스트 실행
      # - name: Run React tests
      #   run: npm test -- --watchAll=false

  # 3. (선택) Docker Build & Push (main 브랜치만)
  docker:
    if: github.ref == 'refs/heads/main'
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/advanced-project-backend:latest ./backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/advanced-project-backend:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/advanced-project-frontend:latest ./frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/advanced-project-frontend:latest

      # (옵션) docker-compose build/push, ghcr.io 푸시 등 확장 가능

  # (옵션) 실제 서버 배포 단계 추가 예시
  # deploy:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [docker]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: SSH 배포
  #       uses: appleboy/ssh-action@v1
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: ${{ secrets.DEPLOY_USER }}
  #         key: ${{ secrets.DEPLOY_KEY }}
  #         script: |
  #           cd /home/your-app
  #           docker-compose pull
  #           docker-compose up -d